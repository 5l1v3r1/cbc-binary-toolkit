# -*- coding: utf-8 -*-

"""Unit tests for the ingestion actor"""

import pytest
from thespian.actors import ActorSystem, ActorExitRequest
from cb_binary_analysis.report_actor import ReportActor
from cbapi.psc.threathunter import CbThreatHunterAPI
from utils.CBAPIMock import CBAPIMock

ENGINE_NAME = "TEST_ENGINE"
FEED_ID = "id1"


@pytest.fixture(scope="session")
def cb_threat_hunter():
    """Create CbThreatHunterAPI singleton"""
    return CbThreatHunterAPI(url="https://example.com",
                             org_key="test",
                             token="abcd/1234",
                             ssl_verify=False)


@pytest.fixture(scope="function")
def actor(cb_threat_hunter):
    """Creates actor to unit test"""
    actor = ActorSystem().createActor(ReportActor)

    ActorSystem().ask(actor, cb_threat_hunter)
    ActorSystem().ask(actor, ENGINE_NAME)
    yield actor
    ActorSystem().ask(actor, ActorExitRequest())


@pytest.fixture(scope="function")
def cbapi_mock(monkeypatch, cb_threat_hunter):
    """Mocks CBAPI for unit tests"""
    return CBAPIMock(monkeypatch, cb_threat_hunter)


@pytest.mark.parametrize("input", [
    [{
        "id": "j39sbv7",
        "match_type": "equality",
        "values": ["127.0.0.1"],
        "severity": 1,
    }],
    [{
        "id": "j39sbv7",
        "match_type": "equality",
        "values": ["127.0.0.1"],
        "severity": 1,
    },
        {
        "id": "slkf038",
        "match_type": "equality",
        "values": ["app.exe"],
        "severity": 10,
    },
        {
        "id": "0kdl4uf9",
        "match_type": "regex",
        "values": [".*google.*"],
        "severity": 3,
    }],
])
def test_receiveMessage_ask(actor, cbapi_mock, input):
    """Test receiveMessage"""
    for ioc in input:
        valid = ActorSystem().ask(actor, ioc, 1)
        assert valid is True

    # Mock report put and send request body back
    cbapi_mock.mock_request("PUT", f"/threathunter/feedmgr/v2/orgs/test/feeds/{FEED_ID}/reports/.*", None)
    assert ActorSystem().ask(actor, ("SEND_REPORTS", FEED_ID), 1) is True
    assert ENGINE_NAME in cbapi_mock._last_request_data["title"]
    assert cbapi_mock._last_request_data["description"] == "Automated report generated by Binary Analysis SDK"

    # Check that all IOCs are attached to a report
    for ioc in input:
        SENT = False
        for report in cbapi_mock._all_request_data:
            if ioc["severity"] == report["severity"] and ioc in report["iocs_v2"]:
                SENT = True
                break
        assert SENT


@pytest.mark.parametrize("input", [
    [{
        "id": "j39sbv7",
        "match_type": "equality",
        "values": ["127.0.0.1"],
        "severity": 1,
    }],
    [{
        "id": "j39sbv7",
        "match_type": "equality",
        "values": ["127.0.0.1"],
        "severity": 1,
    },
        {
        "id": "slkf038",
        "match_type": "equality",
        "values": ["app.exe"],
        "severity": 10,
    },
        {
        "id": "0kdl4uf9",
        "match_type": "regex",
        "values": [".*google.*"],
        "severity": 3,
    }],
])
def test_receiveMessage_tell(actor, cbapi_mock, input):
    """Test receiveMessage"""
    for ioc in input:
        ActorSystem().tell(actor, ioc)
        valid = ActorSystem().listen()
        assert valid is True

    # Mock report put and send request body back
    cbapi_mock.mock_request("PUT", f"/threathunter/feedmgr/v2/orgs/test/feeds/{FEED_ID}/reports/.*", None)
    ActorSystem().tell(actor, ("SEND_REPORTS", FEED_ID))
    success = ActorSystem().listen()
    assert success is True

    assert ENGINE_NAME in cbapi_mock._last_request_data["title"]
    assert cbapi_mock._last_request_data["description"] == "Automated report generated by Binary Analysis SDK"

    # Check that all IOCs are attached to a report
    for ioc in input:
        SENT = False
        for report in cbapi_mock._all_request_data:
            if ioc["severity"] == report["severity"] and ioc in report["iocs_v2"]:
                SENT = True
                break
        assert SENT


@pytest.mark.parametrize("input", [
    None,
    {},
    "INVALID",
    {
        "match_type": "equality",
        "values": ["127.0.0.1"],
        "severity": 1,
    },
    {
        "id": "slkf038",
        "match_type": "equality",
        "values": ["127.0.0.1"],
        "severity": 20,
    },
    {
        "id": "slkf038",
        "match_type": "equality",
        "values": ["127.0.0.1"],
        "severity": -5,
    },
    {
        "id": "slkf038",
        "match_type": "UNKNOWN",
        "values": ["127.0.0.1"],
        "severity": 10,
    },
    {
        "id": "slkf038",
        "match_type": "regex",
        "values": "127.0.0.1",
        "severity": 10,
    }
])
def test_receiveMessage_invalid(actor, cbapi_mock, input):
    """Test receiveMessage"""
    valid = ActorSystem().ask(actor, input, 1)
    assert valid is False
